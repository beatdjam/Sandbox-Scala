// 17 コレクションの操作

// 17.1 シーケンス
// 17.1.1 リスト
// 任意のインデックスへの探索は遅いが、先頭項目の追加削除が早く、パターンマッチにも用いりやすい

// 17.1.2 配列
// 任意の位置の要素に効率的にアクセスできる
// JavaのArrayとシームレスに扱える

// 17.1.3 リストバッファー
// ListのStringBuilderみたいなもん
// headに追加してreverseとか、スタックオーバーフローの心配をしなくていいなどがある

// 17.1.4 配列バッファー
// シーケンスの先頭と末尾で要素の追加・削除ができる
// 配列のメソッドはすべて使える

// 17.1.5 文字列(StringOps)
// StringからStringOpsへの暗黙の型変換があるので文字列をシーケンスとして扱える

// 17.2 集合とマップ(Set, Map)
// ミュータブル版とイミュータブル版があるけど基本はイミュータブル版が使われる

// 17.2.1 集合の使い方
// 重複する要素を含まない

// 17.2.2 マップの使い方
// Key, Valueの形で値を持てる

// 17.2.3 デフォルトの集合とマップ
// ファクトリメソッドから返される実装は個数によって異なる

// 17.2.4 ソートされた集合とマップ
// SortedSet, SortedMapを実装したTreeSet, TreeMapがある
// 順番はOrderedトレイトで定義される

// 17.3 ミュータブル版とイミュータブル版のどちらを使うべきか
// イミュータブル版のほうが動作を推論しやすいのでまずはイミュータブルで作る
// イミュータブルな値でもvarで宣言されていればa = a + b のように、新たなイミュータブルなコレクションを生成した形とみなす
var nums = Set(1, 2, 3)
nums += 4

// 17.4 コレクションの初期化
// 一般的にはファクトリメソッドで生成する
// ListからTreeSetを作りたいときはtoメソッドを使う

// 17.4.1 配列やリストへの変換
// toListやtoArrayが生えてる

// 17.4.2 集合・マップのミュータブル版とイミュータブル版の相互変換
// toメソッドが使える

// 17.5 タプル
// タプルは異なる型のオブジェクトを格納できるのでIterableではない

// 17.6 まとめ