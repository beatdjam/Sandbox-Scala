// 14 アサーションとテスト
// 14.1 アサーション
// assertに与えた引数が条件を満たさない場合にAssertionErrorを投げる
def divide(num: Long, denom: Long) : Long = {
  assert(denom != 0, "Error!")
  num / denom
}

// ensuringメソッドを使って結果値に対するアサーションをすることもできる
(1 - 1) ensuring (_ >= 0) // ensuringに渡るのがtrueなので計算結果が返却される
(0 - 1) ensuring (_ >= 0) // AssertionErrorになる

// 14.2 Scalaのテスト環境

// ScalaTestについて
// Suite : テストのコレクション
// Test : 名前を持ち、起動できて、成功、失敗、保留、中止のどれかになるもの
// 様々なテストスタイルに適用できるSuite(AnyFunSuiteなど)を持っている

// 14.3 情報が豊富なエラーレポート
// ScalaTestのassertが失敗したとき、エラーレポートにはファイル名、行番号、エラーメッセージが表示される

// 14.4 仕様としてのテスト
// ScalaTestではAnyFlatSpecを利用することによってBDDを実践しやすくなっている
// Testは仕様規定節として表され、レポートでも振る舞いを表す仕様のように見える

// specs2もBDDスタイルのテストを実施できるが、記法は異なる

// AnyFeatureSpecは、ステークホルダー間のコミュニケーションを促進するために
// Given, When, Thenのようなメソッドでシナリオを記述することができる


// 14.5 プロパティベースのテスト
// ScalaCheckは、テスト中のコードが従わなければならない性質を規定できるようになっている
// 記述したルールに基づいたテストデータが生成され、振る舞いを満たすかどうかをチェックする

// 14.6 テストの構成と実行

// 14.7 まとめ